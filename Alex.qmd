---
title: "Overview" 
author: "Alex Trinidad (Chair)"
format:
  html: 
    grid: 
      margin-width: 350px
  pdf: default
reference-location: margin
citation-location: margin
---



## Regression and Other Stories Reading Club Session (chapter 1) 
On 14-11-2023 Alex Trinidad (University of Cologne and Netherlands Institute for the Stduy of Crime and Law Enforcement) presented the first chapter of the book *Regression and Other Stories* by Andrew Gelman, Jennifer Hill, and Aki Vehtari. The session was held online via Zoom.
[Here]() you can find Alex' script Trinidad.

First he loaded this package.

```{r message=FALSE, warning=FALSE}
#| label: load-packages

library(tidyverse)
```



1. Regression to predict 

How can we predict presidential vote share using economy growth? For this he loaded the ROS-data.

```{r}
#| label: load-data1

elections_data <- read.csv(url("https://raw.githubusercontent.com/avehtari/ROS-Examples/master/ElectionsEconomy/data/hibbs.dat"), sep = "")

```

This another way to load these data.

```{r}
#| label: load-data2

remotes::install_github("avehtari/ROS-Examples", subdir = "rpackage")
elections_data <- rosdata::hibbs
```


Let us first explore economy growth.

```{r}
#| label: explore-data

glimpse(elections_data)
```
Try the view-function yourself.

```{r}
# View(elections_data)
```

Use visualization to understand the data.

```{r}
#| label: plot-data1
#| fig.cap: "Predicting elections from the economy 1952-2016"
#| column: margin

ggplot(data = elections_data) +
  geom_point(aes(x = year, y = growth))

```

Add a line to the plot.

```{r message=FALSE, warning=FALSE}
#| label: plot-data2
#| fig.cap: "Predicting elections from the economy 1952-2016 with line"
#| column: margin

ggplot(data = elections_data) +
  geom_point(aes(x = year, y = growth)) +
  geom_smooth(aes(x = year, y = growth), se = FALSE)
```

Add the CI around the line.

```{r message=FALSE, warning=FALSE}
#| label: plot-data3
#| fig.cap: "Predicting elections from the economy 1952-2016 with line and confidence interval"
#| column: margin

ggplot(data = elections_data) +
  geom_point(aes(x = year, y = growth)) +
  geom_smooth(aes(x = year, y = growth), se = TRUE)
```

Fit ols-regression to obtain the predicted values.

```{r}
#| label: fit-ols

mod1 <- lm(vote ~ growth, data = elections_data)
```

Summarize the regression results.

```{r}
#| label: summary-ols

summary(mod1)
```

Plot the predicted values.

```{r}
#| label: plot-predicted
#| column: margin
#| fig.cap: "Predicting elections from the economy 1952-2016 with line"

plot(elections_data$growth, elections_data$vote, xlab = "Economic Growth", ylab = "Vote Share")
abline(coef(mod1), col = "red")
```
Predicted values with ggplot.

```{r}
#| label: plot-predicted2
#| column: margin
  
ggplot(data = elections_data) +
  geom_point(aes(x = growth, y = vote)) +
  geom_abline(intercept = mod1[[1]][[1]], slope = mod1[[1]][[2]], color = "red", size = 1) +
  scale_x_continuous(labels = scales::label_percent(accuracy = 1, scale = 1)) + 
  scale_y_continuous(labels = scales::label_percent(accuracy = 1, scale = 1)) + 
  geom_hline(yintercept = 50) +
  labs(title = "Data and linear fit",
       x = "Average recent growth in personal income",
       y = "Incumbent party's vote share")
```

Predicted values with ggplot and geom_smooth.

```{r message=FALSE, warning=FALSE}
#| label: plot-predicted3
#| column: margin

ggplot(data = elections_data) +
  geom_point(aes(x = growth, y = vote)) +
  geom_smooth(method = "lm", aes(x = growth, y = vote), color = "blue", size = 1) +
  scale_x_continuous(labels = scales::label_percent(accuracy = 1, scale = 1)) + 
  scale_y_continuous(labels = scales::label_percent(accuracy = 1, scale = 1)) + 
  geom_hline(yintercept = 50) +
  labs(title = "Data and linear fit",
       x = "Average recent growth in personal income",
       y = "Incumbent party's vote share")
```

2. Sketching regression 

Original $y = 46.3 + 3.0 x$. Explore the descriptive stats to get some parameters based on the observed data.

```{r}
#| label: descriptive-stats

elections_data |> 
  summarise(min_growth = min(growth),
            max_growth = max(growth),
            mean_growth = mean(growth),
            sd_growth = sd(growth),
            min_vote = min(vote),
            max_vote = max(vote),
            mean_vote = mean(vote),
            sd_vote = sd(vote))
```

Simulating the data (technique often used in this book).

```{r}
#| label: simulate-data
set.seed(123)
N <- 16
simu_growth <- runif(N, -0.39, 4)
simu_vote <- rnorm(N, 46.2476  + 3.0605*simu_growth, 3.763)
simu_elections <- data.frame(N,simu_growth, simu_vote)
```

Model the simulated data.

```{r}
#| label: model-simulated
simu_mod <- lm(simu_vote ~ simu_growth, data = simu_elections)
```

Summarize the model.

```{r}
#| label: summary-simulated
summary(simu_mod)
```

Plot the simulated data using base graphics.

```{r}
#| label: plot-simulated
#| column: margin
#| fig.cap: "Simulated Data and linear fit"

# Base graphic
plot(simu_elections$simu_growth, simu_elections$simu_vote, xlab = "Simulated Economic Growth", ylab = "Simulated Vote Share")
abline(coef(simu_mod), col = "blue")
```

Plot the samen using ggplot version.

```{r message=FALSE, warning=FALSE}
#| label: plot-simulated2
#| column: margin
 
ggplot(data = simu_elections) +
  geom_point(aes(x = simu_growth, y = simu_vote)) +
  geom_smooth(method = "lm", aes(x = simu_growth, y = simu_vote), color = "blue", size = 1) +
  scale_x_continuous(labels = scales::label_percent(accuracy = 1, scale = 1)) + 
  scale_y_continuous(labels = scales::label_percent(accuracy = 1, scale = 1)) + 
  geom_hline(yintercept = 50) +
  labs(title = "Simulated Data and linear fit",
       x = "Simulated Average recent growth in personal income",
       y = "Simulated Incumbent party's vote share")
```

Exercise 1.2(a) from ROS for sketching a regression model and data. 

a) $y = 30 + 10x$  (residual $sd 3.9$) & values of X ranging from $0-4$ 

Define the data.

```{r}
#| label: exercise-1.2

set.seed(123)
N <- 50
x <- runif(N, 0, 4)
y <- rnorm(N, 30 + 10*x, 3.9)
data <- data.frame(N, x, y)
```

Model the data.

```{r}
#| label: exercise-1.2-model
lm_a <- lm(y ~ x, data)
```

Plot the data.

```{r}
#| label: exercise-1.2-plot
#| column: margin
#| fig.cap: "Exercise 1.2 from ROS"

plot(data$x, data$y, xlab = "X Value", ylab = "Y value")
abline(coef(lm_a), col = "red", size = 1)
```

b) $y = 30 + 10x$  (residual $sd 10$) & values of X ranging from $0-4$. 

Define the data.

```{r}
#| label: exercise-1.2b

set.seed(123)
N <- 50
x <- runif(N, 0, 4)
y <- rnorm(N, 30 + 10*x, 10)
data <- data.frame(N, x, y)
```

Model it.

```{r}
#| label: exercise-1.2b-model

lm_b <- lm(y ~ x, data)
```

Plot it.

```{r}
#| label: exercise-1.2b-plot
#| column: margin
#| fig.cap: "Continuous predictor"

plot(data$x, data$y, xlab = "X Value", ylab = "Y value")
abline(coef(lm_b), col = "blue")
```

Now simulate a binary predictor [example from the Aki Vehtari GH](https://avehtari.github.io/ROS-Examples/SimpleCausal/causal.html)

See Figure 1.5 (page 10).

```{r}
#| label: binary-predictor

set.seed(1411)
N <- 50
x <- runif(N, 0, 4)
y <- rnorm(N, 30 + 10*x, 10)
x_binary <- ifelse(x < 3, 0, 1)
data_simu <- data.frame(N, x, y, x_binary)
```

Model it.

```{r}
#| label: binary-predictor-model

lm_binary <- lm(y ~ x_binary, data = data_simu)
```

Summarize the model.

```{r}
#| label: binary-predictor-summary
summary(lm_binary)
```

Plot the relationship.

```{r}
#| label: binary-predictor-plot
#| column: margin
#| fig.cap: "Binary predictor"

ggplot(data = data_simu) +
  geom_point(aes(x = x_binary, y = y)) +
  geom_abline(intercept = lm_binary[[1]][[1]], slope = lm_binary[[1]][[2]],
              color = "blue", size = 1) +
  labs(y = "Crime reduction", 
       x =  NULL) +
  scale_x_continuous(breaks = c(0,1),
                     labels = c("Control", "Treatment")) +
  annotate(geom = "text", x = 0.50, y = 40,
           label = paste("Estimated treatment effect is\nslope of fitted line: ",
                         round(lm_binary[[1]][[2]], digits = 2)))
```

Non-linear relationship 

```{r}
#| label: non-linear

set.seed(1411)
x <- runif(N, 1, 7)
y <- rnorm(N, 7 + 30*exp(-x), 2)
data_simu$y <- y
```

Fit the model. 

```{r}
#| label: non-linear-model

lm_nonlinear <- lm(y ~ x, data = data_simu)
```

Summarize the model.

```{r}
#| label: non-linear-summary

summary(lm_nonlinear)
```           

Plot the model outcome.

```{r message=FALSE, warning=FALSE}
#| label: non-linear-plot
#| column: margin
#| fig.cap: "Non-linear relationship"

ggplot(data = data_simu) +
  geom_point(aes(x = x, y = y)) +
  geom_smooth(method = "loess", aes(x = x, y = y), color = "blue", size = 1, se = FALSE) +
  labs(y = "Theft counts per hour", 
       x =  "Hours of foot patrol")  
```
