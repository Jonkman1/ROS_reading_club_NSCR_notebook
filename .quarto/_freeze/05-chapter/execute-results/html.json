{
  "hash": "8c4351b3c5594e38a2e82001e93971b4",
  "result": {
    "markdown": "---\ntitle: \"Simulation\"\nauthor: \"X Y (Chair)\"\nformat:\n  html: \n    grid: \n      margin-width: 350px\n  pdf: default\nreference-location: margin\ncitation-location: margin\n---\n\n\n## Summary\n\nIn this book *Regression and Other Stories* and in practice Gelman et all. use simulation for different reasons: \\\n- use probability models to mimic variation in the world (tools of simulation can help us better to understand how this variation plays out); \\\n- use simulation to approximate the sampling distribution of data and propagate this to the sampling distribution of statistical estimates and procedures;\\\n- regression models are not deterministic; they produce probabilisitc predictions. Simulation is the most convenient and general way to represent uncertainties in forecasts. \n\nBecause of this, chapter 5 introduces simulations (basic ideas and tools to perform it in `R`).\n\n\nThere are many settings where it makes sense to use a set of simulation draws to summarize a distribution, which can represent a simulation from a probability model, a prediction for a future outcome from a fitted regression, or uncertainty about parameters in a fitted model.\n\n\nIn this book they use the Bayesian simulation approach for regression models. Bootstrap is also a simulation approach, but it is not as general as Bayesian simulation. It is very general, any estimate can be simulated, and it is easy to use with complex models. But it has limitations (for example leading to an answer with an inappropriately high level of certainty). This method is not used in the book.\n\n## Presentation\n\nDifferent examples of simulations of discrete, continuous, and mixed discrete/ continuous models are presented in this chapter.\n\nIt starts with a discrete model example: Across the world the probability a baby will be born a girl is about $48.8\\%$, with the probability of a boy then being about $51.2\\%$. If you wanted to get a sense of how many girls you'd expect out of 400 births, you could simulate using the `rbinom()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(5)\n# use set seed here because we want to get the same results every time we run the code\n\nrbinom(n = 1, size = 400, prob = 0.488)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 188\n```\n:::\n:::\n\n\nGraph results of 10000 simulations:\n\n\n::: {.cell .column-margin}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nset.seed(5)\n# set the global plotting theme\ntheme_set(theme_linedraw() +\n            theme(panel.grid = element_blank()))\n\n# set the seed\nset.seed(5)\n\n# simulate\ntibble(girls = rbinom(n = 10000, size = 400, prob = .488)) %>% \n  \n# plot\nggplot(aes(x = girls)) +\ngeom_histogram(binwidth = 2) +\nscale_x_continuous(\"Number of girls out of 400 single births \\ \n                   in 10.000 observations\", breaks = 7:9 * 25) +\nscale_y_continuous(expand = expansion(mult = c(0, 0.05)))\n```\n\n::: {.cell-output-display}\n![Simulating 400 births](05-chapter_files/figure-html/rbinom_graph-1.png){width=672}\n:::\n:::\n\n\nAlso simulations of other models are presented. For example, the normal, binomial and Poisson distributions are presented.\n\nDefine mean=3 and sd=0,5\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean = 3\nsd = 0.5\nn_sims = 10000\n```\n:::\n\n\nPlot the results of 10000 simulations of a normal distribution with mean=3 and sd=0,5:\n\nThen plot the results in histograms:\n\n\n::: {.cell .column-margin}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nset.seed(660)\n\nd <- tibble(x = rnorm(n_sims, mean = mean, sd = sd))\n\nd %>% \n  ggplot(aes(x)) +\n  geom_histogram(binwidth = 0.1) +\n  labs(\n    title =\n      str_glue(\n        \"Normal distribution with mean {mean} and standard deviation {sd}\"\n      )\n  )\n```\n\n::: {.cell-output-display}\n![Simulating a normal distribution](05-chapter_files/figure-html/normal-1.png){width=672}\n:::\n:::\n\n\nHere data for a binomial distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsize <- 20\nprob <- 0.6\n```\n:::\n\n\nLet us plot the results of 10000 simulations of a binomial distribution with size=20 and prob=0.6:\n\n\n::: {.cell .column-margin}\n\n```{.r .cell-code}\nset.seed(660)\n\nd <- tibble(x = rbinom(n_sims, size = size, prob = prob))\n\nd %>% ggplot(aes(x)) +\n  geom_bar() +\n  scale_x_continuous(breaks = seq(0, size), minor_breaks = NULL) +\n  coord_cartesian(xlim = c(0, size)) +\n  labs(\n    title =\n      str_glue(\n        \"Binomial distribution with size {size} and probability {prob}\"\n      )\n  )\n```\n\n::: {.cell-output-display}\n![Simulating a binomial distribution](05-chapter_files/figure-html/binomial_graph-1.png){width=672}\n:::\n:::\n\n\nNow a Poisson distribution with mean 5:\n\n\n::: {.cell .column-margin}\n\n```{.r .cell-code}\nlambda <- 5\n\nset.seed(660)\n\nd <- tibble(x = rpois(n_sims, lambda))\n\nd %>% ggplot(aes(x)) +\n  geom_bar() +\n  scale_x_continuous(breaks = seq(0, 2 * lambda), minor_breaks = NULL) +\n  coord_cartesian(xlim = c(0, 2 * lambda)) +\n  labs(\n    title = str_glue(\"Poisson distribution with mean {lambda}\")\n  )\n```\n\n::: {.cell-output-display}\n![Simulating a Poisson distribution](05-chapter_files/figure-html/poisson-1.png){width=672}\n:::\n:::\n\n\n\nHere you find a **tidyverse** oriented flow, as Kurz defined it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(5)\n\ntibble(z = rnorm(1e4, mean = 5, sd = 2)) %>% \n  summarise(mean   = mean(z),\n            median = median(z),\n            sd     = sd(z),\n            mad_sd = mad(z))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n   mean median    sd mad_sd\n  <dbl>  <dbl> <dbl>  <dbl>\n1  5.00   4.99  2.02   2.03\n```\n:::\n:::\n",
    "supporting": [
      "05-chapter_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}